#settings.py
"""
Django settings for BackEnd project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# ------------------------------ API for web & pygame ------------------------------

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('JOYBOARD_SECRET_KEY')

# SECURITY WARNING: this is secret api key do not share!
SECRET_API_KEY = os.getenv('SECRET_API_KEY')

API_LOGIN_PATH = os.getenv('API_LOGIN_PATH')
API_SUBMIT_SCORE_PATH = os.getenv('API_SUBMIT_SCORE_PATH')
API_GET_CONFIG = os.getenv('API_GET_CONFIG')

# Admin Dashboard Path
ADMIN_PATH = os.getenv('ADMIN_PATH')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('JOYBOARD_DEBUG', 'False') == 'True'
ALLOWED_HOSTS = os.getenv('JOYBOARD_ALLOWED_HOSTS', '').split(',')


# Application definition

INSTALLED_APPS = [
    'accounts',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BackEnd.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BackEnd.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('PG_NAME'),
        'USER': os.getenv('PG_USER'),
        'PASSWORD': os.getenv('PG_PASSWORD'),
        'HOST': os.getenv('PG_HOST'),
        'PORT': os.getenv('PG_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Tell WhiteNoise to use compressed manifest storage for caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Getting Download Link
SUPABASE_SIGNED_URL = os.getenv('SUPABASE_SIGNED_URL')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',  # Only allow JSON output
    )
}


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587

#Email Configuration 
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

# ------------------------------ Pygame ------------------------------
MAX_LEVEL = int(os.environ["MAX_LEVEL"])
HORIZANTAL_ACC = float(os.environ["HORIZANTAL_ACC"])
HORIZANTAL_FRICTION = float(os.environ["HORIZANTAL_FRICTION"])
VERTICAL_ACC = float(os.environ["VERTICAL_ACC"])
VERTICAL_JUMP_SPEED = int(os.environ["VERTICAL_JUMP_SPEED"])
MAX_HORIZANTAL_SPEED = int(os.environ["MAX_HORIZANTAL_SPEED"])
TERM_VELOCITY = int(os.environ["TERM_VELOCITY"])
SHOOTING_SPEED = float(os.environ["SHOOTING_SPEED"])
BULLET_SPEED = int(os.environ["BULLET_SPEED"])
HEALTH_BAR_VALUE = int(os.environ["HEALTH_BAR_VALUE"])
IMMUNITY_BAR_VALUE = int(os.environ["IMMUNITY_BAR_VALUE"])
JUMP_IMMUNITY_COST = int(os.environ["JUMP_IMMUNITY_COST"])
BULLET_IMMUNITY_COST = int(os.environ["BULLET_IMMUNITY_COST"])
IMMUNITY_REGEN_RATE = float(os.environ["IMMUNITY_REGEN_RATE"])
LAVA_DAMAGE_AMOUNT = int(os.environ["LAVA_DAMAGE_AMOUNT"])
MAX_LAVA_DAMAGE_COOLDOWN = int(os.environ["MAX_LAVA_DAMAGE_COOLDOWN"])
ENEMY_SHOOT_RANGE = int(os.environ["ENEMY_SHOOT_RANGE"])
MIN_ENEMY_SHOOT_COOLDOWN = int(os.environ["MIN_ENEMY_SHOOT_COOLDOWN"])
MAX_ENEMY_SHOOT_COOLDOWN = int(os.environ["MAX_ENEMY_SHOOT_COOLDOWN"])
ENEMY_MELEE_DAMAGE = int(os.environ["ENEMY_MELEE_DAMAGE"])
ENEMY_BULLET_DAMAGE = int(os.environ["ENEMY_BULLET_DAMAGE"])
COLLECTABLE_SPAWN_ATTEMPTS = int(os.environ["COLLECTABLE_SPAWN_ATTEMPTS"])
COLLECTABLE_MIN_DIST_FROM_ENEMY_TILE = int(os.environ["COLLECTABLE_MIN_DIST_FROM_ENEMY_TILE"])